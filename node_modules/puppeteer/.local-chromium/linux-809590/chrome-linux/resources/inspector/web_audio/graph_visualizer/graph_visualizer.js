import{ObjectWrapper as t}from"../../common/common.js";import{UIUtils as e}from"../../ui/ui.js";const o={In:Symbol("In"),Out:Symbol("Out"),Param:Symbol("Param")};var a=Object.freeze({__proto__:null,PortPadding:4,InputPortRadius:10,AudioParamRadius:5,LeftMarginOfText:12,RightMarginOfText:30,LeftSideTopPadding:5,BottomPaddingWithoutParam:6,BottomPaddingWithParam:8,ArrowHeadSize:12,GraphPadding:20,GraphMargin:20,TotalInputPortHeight:24,TotalOutputPortHeight:24,TotalParamPortHeight:14,NodeLabelFontStyle:"14px Segoe UI, Arial",ParamLabelFontStyle:"12px Segoe UI, Arial",PortTypes:o,Size:void 0,Point:void 0,NodeLayout:void 0,Port:void 0,NodeCreationData:void 0,ParamCreationData:void 0,NodesConnectionData:void 0,NodesDisconnectionData:void 0,NodesDisconnectionDataWithDestination:void 0,NodeParamConnectionData:void 0,NodeParamDisconnectionData:void 0});const d=t=>({x:0,y:15+24*t}),i=(t,e,o)=>{const{width:a,height:d}=e;return{x:a,y:d/2+24*(2*t-o+1)/2}},s=(t,e)=>({x:0,y:e+14*(t+1)-5});var n=Object.freeze({__proto__:null,calculateInputPortXY:d,calculateOutputPortXY:i,calculateParamPortXY:s});class r{constructor(t,e){this.id=t.nodeId,this.type=t.nodeType,this.numberOfInputs=t.numberOfInputs,this.numberOfOutputs=t.numberOfOutputs,this.label=e,this.size={width:0,height:0},this.position=null,this._layout={inputPortSectionHeight:0,outputPortSectionHeight:0,maxTextLength:0,totalHeight:0},this.ports=new Map,this._initialize(t)}_initialize(t){this._updateNodeLayoutAfterAddingNode(t),this._setupInputPorts(),this._setupOutputPorts()}addParamPort(t,e){const a=this.getPortsByType(o.Param).length,{x:d,y:i}=s(a,this._layout.inputPortSectionHeight);this._addPort({id:p(this.id,t),type:o.Param,label:e,x:d,y:i}),this._updateNodeLayoutAfterAddingParam(a+1,e),this._setupOutputPorts()}getPortsByType(t){const e=[];return this.ports.forEach(o=>{o.type===t&&e.push(o)}),e}_updateNodeLayoutAfterAddingNode(t){const e=24*Math.max(1,t.numberOfInputs)+5;this._layout.inputPortSectionHeight=e,this._layout.outputPortSectionHeight=24*t.numberOfOutputs,this._layout.totalHeight=Math.max(e+6,this._layout.outputPortSectionHeight);const o=_(this.label,"14px Segoe UI, Arial");this._layout.maxTextLength=Math.max(this._layout.maxTextLength,o),this._updateNodeSize()}_updateNodeLayoutAfterAddingParam(t,e){const o=this._layout.inputPortSectionHeight+14*t+8;this._layout.totalHeight=Math.max(o,this._layout.outputPortSectionHeight);const a=_(e,"12px Segoe UI, Arial");this._layout.maxTextLength=Math.max(this._layout.maxTextLength,a),this._updateNodeSize()}_updateNodeSize(){this.size={width:Math.ceil(12+this._layout.maxTextLength+30),height:this._layout.totalHeight}}_setupInputPorts(){for(let t=0;t<this.numberOfInputs;t++){const{x:e,y:a}=d(t);this._addPort({id:h(this.id,t),type:o.In,x:e,y:a})}}_setupOutputPorts(){for(let t=0;t<this.numberOfOutputs;t++){const e=u(this.id,t),{x:a,y:d}=i(t,this.size,this.numberOfOutputs);if(this.ports.has(e)){const t=this.ports.get(e);t.x=a,t.y=d}else this._addPort({id:e,type:o.Out,x:a,y:d})}}_addPort(t){this.ports.set(t.id,t)}}const h=(t,e)=>`${t}-input-${e||0}`,u=(t,e)=>`${t}-output-${e||0}`,p=(t,e)=>`${t}-param-${e}`;class l{constructor(){this._totalNumberOfNodes=0}generateLabel(t){t.endsWith("Node")&&(t=t.slice(0,t.length-4)),this._totalNumberOfNodes+=1;return`${t} ${this._totalNumberOfNodes}`}}let g;const _=(t,o)=>{g||(g=createElement("canvas").getContext("2d"));const a=g;a.save(),a.font=o;const d=e.measureTextWidth(a,t);return a.restore(),d};var c=Object.freeze({__proto__:null,NodeView:r,generateInputPortId:h,generateOutputPortId:u,generateParamPortId:p,NodeLabelGenerator:l,measureTextWidth:_});class m{constructor(t,e){const{edgeId:o,sourcePortId:a,destinationPortId:d}=P(t,e);this.id=o,this.type=e,this.sourceId=t.sourceId,this.destinationId=t.destinationId,this.sourcePortId=a,this.destinationPortId=d}}const P=(t,e)=>{if(!t.sourceId||!t.destinationId)return console.error("Undefined node message: "+JSON.stringify(t)),null;const o=u(t.sourceId,t.sourceOutputIndex),a=function(t,e){if(e===y.NodeToNode)return h(t.destinationId,t.destinationInputIndex);if(e===y.NodeToParam)return p(t.destinationId,t.destinationParamId);return console.error("Unknown edge type: "+e),""}(t,e);return{edgeId:`${o}->${a}`,sourcePortId:o,destinationPortId:a}},y={NodeToNode:Symbol("NodeToNode"),NodeToParam:Symbol("NodeToParam")};var I=Object.freeze({__proto__:null,EdgeView:m,generateEdgePortIdsByData:P,EdgeTypes:y});class N extends Common.Object{constructor(t){super(),this.contextId=t,this._nodes=new Map,this._edges=new Map,this._outboundEdgeMap=new Platform.Multimap,this._inboundEdgeMap=new Platform.Multimap,this._nodeLabelGenerator=new l,this._paramIdToNodeIdMap=new Map}addNode(t){const e=this._nodeLabelGenerator.generateLabel(t.nodeType),o=new r(t,e);this._nodes.set(t.nodeId,o),this._notifyShouldRedraw()}removeNode(t){this._outboundEdgeMap.get(t).forEach(t=>this._removeEdge(t)),this._inboundEdgeMap.get(t).forEach(t=>this._removeEdge(t)),this._nodes.delete(t),this._notifyShouldRedraw()}addParam(t){const e=this.getNodeById(t.nodeId);e?(e.addParamPort(t.paramId,t.paramType),this._paramIdToNodeIdMap.set(t.paramId,t.nodeId),this._notifyShouldRedraw()):console.error("AudioNode should be added before AudioParam")}removeParam(t){this._paramIdToNodeIdMap.delete(t)}addNodeToNodeConnection(t){const e=new m(t,y.NodeToNode);this._addEdge(e)}removeNodeToNodeConnection(t){if(t.destinationId){const{edgeId:e}=P(t,y.NodeToNode);this._removeEdge(e)}else this._outboundEdgeMap.get(t.sourceId).forEach(t=>this._removeEdge(t))}addNodeToParamConnection(t){const e=new m(t,y.NodeToParam);this._addEdge(e)}removeNodeToParamConnection(t){const{edgeId:e}=P(t,y.NodeToParam);this._removeEdge(e)}getNodeById(t){return this._nodes.get(t)}getNodes(){return this._nodes}getEdges(){return this._edges}getNodeIdByParamId(t){return this._paramIdToNodeIdMap.get(t)}_addEdge(t){const e=t.sourceId;this._outboundEdgeMap.hasValue(e,t.id)||(this._edges.set(t.id,t),this._outboundEdgeMap.set(e,t.id),this._inboundEdgeMap.set(t.destinationId,t.id),this._notifyShouldRedraw())}_removeEdge(t){const e=this._edges.get(t);e&&(this._outboundEdgeMap.delete(e.sourceId,t),this._inboundEdgeMap.delete(e.destinationId,t),this._edges.delete(t),this._notifyShouldRedraw())}_notifyShouldRedraw(){this.dispatchEventToListeners(f.ShouldRedraw,this)}}const f={ShouldRedraw:Symbol("ShouldRedraw")};var x=Object.freeze({__proto__:null,GraphView:N,Events:f});class b extends t.ObjectWrapper{constructor(){super(),this._graphMapByContextId=new Map}createContext(t){const e=new N(t);e.addEventListener(f.ShouldRedraw,this._notifyShouldRedraw,this),this._graphMapByContextId.set(t,e)}destroyContext(t){if(!this._graphMapByContextId.has(t))return;this._graphMapByContextId.get(t).removeEventListener(f.ShouldRedraw,this._notifyShouldRedraw,this),this._graphMapByContextId.delete(t)}hasContext(t){return this._graphMapByContextId.has(t)}clearGraphs(){this._graphMapByContextId.clear()}getGraph(t){return this._graphMapByContextId.get(t)}_notifyShouldRedraw(t){const e=t.data;this.dispatchEventToListeners(f.ShouldRedraw,e)}}var S=Object.freeze({__proto__:null,GraphManager:b});export{I as EdgeView,S as GraphManager,a as GraphStyle,x as GraphView,n as NodeRendererUtility,c as NodeView};
