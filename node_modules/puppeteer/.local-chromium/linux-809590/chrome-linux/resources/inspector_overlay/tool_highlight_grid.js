(function(){'use strict';window.viewportSize={width:800,height:600};window.deviceScaleFactor=1;window.emulationScaleFactor=1;window.pageScaleFactor=1;window.pageZoomFactor=1;window.scrollX=0;window.scrollY=0;function reset(resetData){window.viewportSize=resetData.viewportSize;window.deviceScaleFactor=resetData.deviceScaleFactor;window.pageScaleFactor=resetData.pageScaleFactor;window.pageZoomFactor=resetData.pageZoomFactor;window.emulationScaleFactor=resetData.emulationScaleFactor;window.scrollX=Math.round(resetData.scrollX);window.scrollY=Math.round(resetData.scrollY);window.canvas=document.getElementById('canvas');if(window.canvas){window.canvas.width=deviceScaleFactor*viewportSize.width;window.canvas.height=deviceScaleFactor*viewportSize.height;window.canvas.style.width=viewportSize.width+'px';window.canvas.style.height=viewportSize.height+'px';window.context=canvas.getContext('2d');window.context.scale(deviceScaleFactor,deviceScaleFactor);window.canvasWidth=viewportSize.width;window.canvasHeight=viewportSize.height;}}
function setPlatform(platform){window.platform=platform;document.body.classList.add('platform-'+platform);}
function dispatch(message){const functionName=message.shift();window[functionName].apply(null,message);}
Element.prototype.createChild=function(tagName,className){const element=createElement(tagName,className);element.addEventListener('click',function(e){e.stopPropagation();},false);this.appendChild(element);return element;};Element.prototype.createTextChild=function(text){const element=document.createTextNode(text);this.appendChild(element);return element;};Element.prototype.removeChildren=function(){if(this.firstChild){this.textContent='';}};function createElement(tagName,className){const element=document.createElement(tagName);if(className){element.className=className;}
return element;}
String.prototype.trimEnd=function(maxLength){if(this.length<=maxLength){return String(this);}
return this.substr(0,maxLength-1)+'\u2026';};Number.constrain=function(num,min,max){if(num<min){num=min;}
else if(num>max){num=max;}
return num;};function adoptStyleSheet(styleSheet){document.adoptedStyleSheets=[...document.adoptedStyleSheets,styleSheet];}
const t=(t,e)=>{let r=!1;for(let n=0;n<e.length;++n)if(-1!==t.indexOf(e.charAt(n))){r=!0;break}if(!r)return String(t);let n="";for(let r=0;r<t.length;++r)-1!==e.indexOf(t.charAt(r))&&(n+="\\"),n+=t.charAt(r);return n},e="string",r="specifier";const n=function(t,n){const i=[];function o(t){t&&(i.length&&i[i.length-1].type===e?i[i.length-1].value+=t:i.push({type:e,value:t,specifier:void 0,precision:void 0,substitutionIndex:void 0}));}function s(t,e,n){i.push({type:r,specifier:t,precision:e,substitutionIndex:n,value:void 0});}function u(t){const e=["black","red","green","yellow","blue","magenta","cyan","lightGray","","default"],n=["darkGray","lightRed","lightGreen","lightYellow","lightBlue","lightMagenta","lightCyan","white",""],o={color:e,colorLight:n,bgColor:e,bgColorLight:n},s={3:"color",9:"colorLight",4:"bgColor",10:"bgColorLight"}[Math.floor(t/10)];if(!s)return;const u=o[s][t%10];u&&i.push({type:r,specifier:"c",value:{description:(s.startsWith("bg")?"background : ":"color: ")+u},precision:void 0,substitutionIndex:void 0});}let a=0,l=0;const c=new RegExp(`%%|%(?:(\\d+)\\$)?(?:\\.(\\d*))?([${Object.keys(n).join("")}])|\\u001b\\[(\\d+)m`,"g");for(let e=c.exec(t);e;e=c.exec(t)){const r=e.index;if(r>a&&o(t.substring(a,r)),"%%"===e[0])o("%");else if(e[0].startsWith("%")){const[t,r,n,i]=e;r&&Number(r)>0&&(l=Number(r)-1);s(i,n?Number(n):-1,l),++l;}else{u(Number(e[4]));}a=r+e[0].length;}return o(t.substring(a)),i},i=function(t,i,o,s,u,a){if(!t||(!i||!i.length)&&-1===t.search(/\u001b\[(\d+)m/))return{formattedResult:u(s,t),unusedSubstitutions:i};function l(){return'String.format("'+t+'", "'+Array.prototype.join.call(i,'", "')+'")'}function c(t){console.error(l()+": "+t);}let f=s;const p=a||n(t,o),h={},g=i||[];for(let t=0;t<p.length;++t){const n=p[t];n.type!==e?n.type===r?!n.value&&void 0!==n.substitutionIndex&&n.substitutionIndex>=g.length?(c("not enough substitution arguments. Had "+g.length+" but needed "+(n.substitutionIndex+1)+", so substitution was skipped."),f=u(f,"%"+(void 0!==n.precision&&n.precision>-1?n.precision:"")+n.specifier)):(n.value||void 0===n.substitutionIndex||(h[n.substitutionIndex]=!0),void 0!==n.specifier&&n.specifier in o?f=u(f,o[n.specifier](n.value||void 0!==n.substitutionIndex&&g[n.substitutionIndex],n)):(d="unsupported format character “"+n.specifier+"”. Treating as a string.",console.warn(l()+": "+d),f=u(f,n.value||void 0===n.substitutionIndex?"":g[n.substitutionIndex]))):c('Unknown token type "'+n.type+'" found.'):f=u(f,n.value);}var d;const y=[];for(let t=0;t<g.length;++t)t in h||y.push(g[t]);return{formattedResult:f,unusedSubstitutions:y}},o={d:function(t){return isNaN(t)?0:t},f:function(t,e){t&&void 0!==e.precision&&e.precision>-1&&(t=t.toFixed(e.precision));const r=void 0!==e.precision&&e.precision>-1?Number(0).toFixed(e.precision):0;return isNaN(t)?r:t},s:function(t){return t}},s=function(t,e){return i(t,e,o,"",(function(t,e){return t+e})).formattedResult},u=function(t,e){return s(t,Array.prototype.slice.call(arguments,1))},a=(t,e)=>{const r=[];let n=t.indexOf(e);for(;-1!==n;)r.push(n),n=t.indexOf(e,n+e.length);return r},l=function(){return"^[]{}()\\.^$*+?|-,"};var c=Object.freeze({__proto__:null,escapeCharacters:t,FORMATTER_TOKEN:void 0,tokenizeFormatString:n,format:i,standardFormatters:o,vsprintf:s,sprintf:u,toBase64:t=>{function e(t){return t<26?t+65:t<52?t+71:t<62?t-4:62===t?43:63===t?47:65}const r=(new TextEncoder).encode(t.toString()),n=r.length;let i,o="";if(0===n)return o;let s=0;for(let t=0;t<n;t++)i=t%3,s|=r[t]<<(16>>>i&24),2===i&&(o+=String.fromCharCode(e(s>>>18&63),e(s>>>12&63),e(s>>>6&63),e(63&s)),s=0);return 0===i?o+=String.fromCharCode(e(s>>>18&63),e(s>>>12&63),61,61):1===i&&(o+=String.fromCharCode(e(s>>>18&63),e(s>>>12&63),e(s>>>6&63),61)),o},findIndexesOfSubString:a,findLineEndingIndexes:t=>{const e=a(t,"\n");return e.push(t.length),e},isWhitespace:t=>/^\s*$/.test(t),trimURL:(t,e)=>{let r=t.replace(/^(https|http|file):\/\//i,"");return e&&r.toLowerCase().startsWith(e.toLowerCase())&&(r=r.substr(e.length)),r},collapseWhitespace:t=>t.replace(/[\s\xA0]+/g," "),reverse:t=>t.split("").reverse().join(""),replaceControlCharacters:t=>t.replace(/[\0-\x08\x0B\f\x0E-\x1F\x80-\x9F]/g,"�"),countWtf8Bytes:t=>{let e=0;for(let r=0;r<t.length;r++){const n=t.charCodeAt(r);if(n<=127)e++;else if(n<=2047)e+=2;else if(n<55296||57343<n)e+=3;else{if(n<=56319&&r+1<t.length){const n=t.charCodeAt(r+1);if(56320<=n&&n<=57343){e+=4,r++;continue}}e+=3;}}return e},stripLineBreaks:t=>t.replace(/(\r)?\n/g,""),toTitleCase:t=>t.substring(0,1).toUpperCase()+t.substring(1),removeURLFragment:t=>{const e=new URL(t);return e.hash="",e.toString()},regexSpecialCharacters:l,filterRegex:function(t){const e="^[]{}()\\.^$*+?|-,";let r="";for(let n=0;n<t.length;++n){let i=t.charAt(n);-1!==e.indexOf(i)&&(i="\\"+i),n&&(r+="[^\\0"+i+"]*"),r+=i;}return new RegExp(r,"i")}});String.sprintf=u,String.regexSpecialCharacters=l,String.prototype.escapeForRegExp=function(){return t(this,String.regexSpecialCharacters())},String.prototype.trimMiddle=function(t){if(this.length<=t)return String(this);let e=t>>1,r=t-e-1;return this.codePointAt(this.length-r-1)>=65536&&(--r,++e),e>0&&this.codePointAt(e-1)>=65536&&--e,this.substr(0,e)+"…"+this.substr(this.length-r,r)},String.prototype.trimEndWithMaxLength=function(t){return this.length<=t?String(this):this.substr(0,t-1)+"…"},String.prototype.compareTo=function(t){return this>t?1:this<t?-1:0},String.hashCode=function(t){if(!t)return 0;const e=4294967291;let r=0,n=1;for(let i=0;i<t.length;i++){r=(r+n*(1506996573*t.charCodeAt(i)))%e,n=1345575271*n%e;}return r=(r+n*(e-1))%e,Math.abs(0|r)},String.naturalOrderComparator=function(t,e){const r=/^\d+|^\D+/;let n,i,o,s;for(;;){if(!t)return e?-1:0;if(!e)return 1;if(n=t.match(r)[0],i=e.match(r)[0],o=!isNaN(n),s=!isNaN(i),o&&!s)return-1;if(s&&!o)return 1;if(o&&s){const t=n-i;if(t)return t;if(n.length!==i.length)return+n||+i?i.length-n.length:n.length-i.length}else if(n!==i)return n<i?-1:1;t=t.substring(n.length),e=e.substring(i.length);}},String.caseInsensetiveComparator=function(t,e){return(t=t.toUpperCase())===(e=e.toUpperCase())?0:t>e?1:-1},Number.toFixedIfFloating=function(t){if(!t||isNaN(t))return t;const e=Number(t);return e%1?e.toFixed(3):String(e)},function(){const t={value:function(t,e,r,n){function i(t,e,r){const n=t[e];t[e]=t[r],t[r]=n;}const o=this[n];i(this,r,n);let s=e;for(let n=e;n<r;++n)t(this[n],o)<0&&(i(this,s,n),++s);return i(this,r,s),s},configurable:!0};Object.defineProperty(Array.prototype,"partition",t),Object.defineProperty(Uint32Array.prototype,"partition",t);const e={value:function(t,e,r,n,i){return 0===e&&r===this.length-1&&0===n&&i>=r?this.sort(t):function t(e,r,n,i,o,s){if(i<=n)return;const u=Math.floor(Math.random()*(i-n))+n,a=e.partition(r,n,i,u);o<a&&t(e,r,n,a-1,o,s),a<s&&t(e,r,a+1,i,o,s);}(this,t,e,r,n,i),this},configurable:!0};Object.defineProperty(Array.prototype,"sortRange",e),Object.defineProperty(Uint32Array.prototype,"sortRange",e);}(),Object.defineProperty(Array.prototype,"lowerBound",{value:function(t,e,r,n){e=e||function(t,e){return t<e?-1:t>e?1:0};let i=r||0,o=void 0!==n?n:this.length;for(;i<o;){const r=i+o>>1;e(t,this[r])>0?i=r+1:o=r;}return o},configurable:!0}),Object.defineProperty(Array.prototype,"upperBound",{value:function(t,e,r,n){e=e||function(t,e){return t<e?-1:t>e?1:0};let i=r||0,o=void 0!==n?n:this.length;for(;i<o;){const r=i+o>>1;e(t,this[r])>=0?i=r+1:o=r;}return o},configurable:!0}),Object.defineProperty(Uint32Array.prototype,"lowerBound",{value:Array.prototype.lowerBound,configurable:!0}),Object.defineProperty(Uint32Array.prototype,"upperBound",{value:Array.prototype.upperBound,configurable:!0}),Object.defineProperty(Int32Array.prototype,"lowerBound",{value:Array.prototype.lowerBound,configurable:!0}),Object.defineProperty(Int32Array.prototype,"upperBound",{value:Array.prototype.upperBound,configurable:!0}),Object.defineProperty(Float64Array.prototype,"lowerBound",{value:Array.prototype.lowerBound,configurable:!0}),Object.defineProperty(Array.prototype,"binaryIndexOf",{value:function(t,e){const r=this.lowerBound(t,e);return r<this.length&&0===e(t,this[r])?r:-1},configurable:!0}),Object.defineProperty(Array.prototype,"peekLast",{value:function(){return this[this.length-1]},configurable:!0}),function(){function t(t,e,r,n){const i=[];let o=0,s=0;for(;o<t.length&&s<e.length;){const u=r(t[o],e[s]);!n&&u||i.push(u<=0?t[o]:e[s]),u<=0&&o++,u>=0&&s++;}if(n){for(;o<t.length;)i.push(t[o++]);for(;s<e.length;)i.push(e[s++]);}return i}Object.defineProperty(Array.prototype,"intersectOrdered",{value:function(e,r){return t(this,e,r,!1)},configurable:!0}),Object.defineProperty(Array.prototype,"mergeOrdered",{value:function(e,r){return t(this,e,r,!0)},configurable:!0});}(),self.createSearchRegex=function(t,e,r){const n=e?"g":"gi";let i;if(r)try{i=new RegExp(t,n);}catch(t){}return i||(i=self.createPlainTextSearchRegex(t,n)),i},self.createPlainTextSearchRegex=function(t,e){const r=String.regexSpecialCharacters();let n="";for(let e=0;e<t.length;++e){const i=t.charAt(e);-1!==r.indexOf(i)&&(n+="\\"),n+=i;}return new RegExp(n,e||"")},self.spacesPadding=function(t){return" ".repeat(t)},self.numberToStringWithSpacesPadding=function(t,e){const r=t.toString(),n=Math.max(0,e-r.length);return self.spacesPadding(n)+r},Set.prototype.firstValue=function(){return this.size?this.values().next().value:null},Map.prototype.inverse=function(){const t=new Platform.Multimap;for(const e of this.keys()){const r=this.get(e);t.set(r,e);}return t};class f{constructor(){this._map=new Map;}set(t,e){let r=this._map.get(t);r||(r=new Set,this._map.set(t,r)),r.add(e);}get(t){return this._map.get(t)||new Set}has(t){return this._map.has(t)}hasValue(t,e){const r=this._map.get(t);return!!r&&r.has(e)}get size(){return this._map.size}delete(t,e){const r=this.get(t);if(!r)return!1;const n=r.delete(e);return r.size||this._map.delete(t),n}deleteAll(t){this._map.delete(t);}keysArray(){return[...this._map.keys()]}valuesArray(){const t=[];for(const e of this._map.values())t.push(...e.values());return t}clear(){this._map.clear();}}self.suppressUnused=function(t){},self.setImmediate=function(t){const e=[...arguments].slice(1);return Promise.resolve().then(()=>t(...e)),0},self.runOnWindowLoad=function(t){"complete"===document.readyState||"interactive"===document.readyState?t():self.addEventListener("DOMContentLoaded",(function e(){self.removeEventListener("DOMContentLoaded",e,!1),t();}),!1);};const p=Symbol("singleton");self.singleton=function(t){if(p in t)return t[p];const e=new t;return t[p]=e,e},self.base64ToSize=function(t){if(!t)return 0;let e=3*t.length/4;return"="===t[t.length-1]&&e--,t.length>1&&"="===t[t.length-2]&&e--,e},self.unescapeCssString=function(t){return t.replace(/(?<!\\)\\(?:([a-fA-F0-9]{1,6})|(.))[\n\t\x20]?/gs,(t,e,r)=>{if(r)return r;const n=parseInt(e,16);return 55296<=n&&n<=57343||0===n||n>1114111?"�":String.fromCodePoint(n)})},self.Platform=self.Platform||{},Platform=Platform||{},Platform.Multimap=f;var h=Object.freeze({__proto__:null,removeElement:(t,e,r)=>{let n=t.indexOf(e);if(-1===n)return!1;if(r)return t.splice(n,1),!0;for(let r=n+1,i=t.length;r<i;++r)t[r]!==e&&(t[n++]=t[r]);return t.length=n,!0}});var g=Object.freeze({__proto__:null,isValid:t=>!isNaN(t.getTime()),toISO8601Compact:t=>{function e(t){return(t>9?"":"0")+t}return t.getFullYear()+e(t.getMonth()+1)+e(t.getDate())+"T"+e(t.getHours())+e(t.getMinutes())+e(t.getSeconds())}});function d(t,...e){return s(t,Array.prototype.slice.call(arguments,1))}function y(t){return t}class b{constructor(t){this._localizedFormat=t,this._tokenizedFormat=n(this._localizedFormat,o);}static _append(t,e){return t+e}format(t){return i(this._localizedFormat,arguments,o,"",b._append,this._tokenizedFormat).formattedResult}}const m=new WeakMap;var v=Object.freeze({__proto__:null,UIString:d,serializeUIString:function(t,e=[]){const r={messageParts:[t],values:e};return JSON.stringify(r)},deserializeUIString:function(t){return t?JSON.parse(t):{}},localize:y,UIStringFormat:b,ls:function(t,...e){if("string"==typeof t)return t;let r=m.get(t);return r||(r=t.join("%s"),m.set(t,r)),d(r,...e)}});var x=Object.freeze({__proto__:null,clamp:(t,e,r)=>{let n=t;return t<e?n=e:t>r&&(n=r),n},mod:(t,e)=>(t%e+e)%e,bytesToString:t=>{if(t<1e3)return d("%.0f B",t);const e=t/1e3;if(e<100)return d("%.1f kB",e);if(e<1e3)return d("%.0f kB",e);const r=e/1e3;return d(r<100?"%.1f MB":"%.0f MB",r)}});var S=Object.freeze({__proto__:null,addAll:function(t,e){for(const r of e)t.add(r);}});function blendColors(fgRGBA,bgRGBA){const alpha=fgRGBA[3];return[((1-alpha)*bgRGBA[0])+(alpha*fgRGBA[0]),((1-alpha)*bgRGBA[1])+(alpha*fgRGBA[1]),((1-alpha)*bgRGBA[2])+(alpha*fgRGBA[2]),alpha+(bgRGBA[3]*(1-alpha)),];}
function rgbaToHsla([r,g,b,a]){const max=Math.max(r,g,b);const min=Math.min(r,g,b);const diff=max-min;const sum=max+min;let h;if(min===max){h=0;}
else if(r===max){h=((1/6*(g-b)/diff)+1)%1;}
else if(g===max){h=(1/6*(b-r)/diff)+1/3;}
else{h=(1/6*(r-g)/diff)+2/3;}
const l=0.5*sum;let s;if(l===0){s=0;}
else if(l===1){s=0;}
else if(l<=0.5){s=diff/sum;}
else{s=diff/(2-sum);}
return[h,s,l,a];}
function luminance([rSRGB,gSRGB,bSRGB]){const r=rSRGB<=0.03928?rSRGB/12.92:Math.pow(((rSRGB+0.055)/1.055),2.4);const g=gSRGB<=0.03928?gSRGB/12.92:Math.pow(((gSRGB+0.055)/1.055),2.4);const b=bSRGB<=0.03928?bSRGB/12.92:Math.pow(((bSRGB+0.055)/1.055),2.4);return 0.2126*r+0.7152*g+0.0722*b;}
let _rgbaToNickname;class Color{constructor(rgba,format,originalText){this._hsla=undefined;this._rgba=rgba;this._originalText=originalText||null;this._originalTextIsValid=!!this._originalText;this._format=format;if(typeof this._rgba[3]==='undefined'){this._rgba[3]=1;}
for(let i=0;i<4;++i){if(this._rgba[i]<0){this._rgba[i]=0;this._originalTextIsValid=false;}
if(this._rgba[i]>1){this._rgba[i]=1;this._originalTextIsValid=false;}}}
static parse(text){const value=text.toLowerCase().replace(/\s+/g,'');const simple=/^(?:#([0-9a-f]{3,4}|[0-9a-f]{6}|[0-9a-f]{8})|(\w+))$/i;let match=value.match(simple);if(match){if(match[1]){let hex=match[1].toLowerCase();let format;if(hex.length===3){format=Format.ShortHEX;hex=hex.charAt(0)+hex.charAt(0)+hex.charAt(1)+hex.charAt(1)+hex.charAt(2)+hex.charAt(2);}
else if(hex.length===4){format=Format.ShortHEXA;hex=hex.charAt(0)+hex.charAt(0)+hex.charAt(1)+hex.charAt(1)+hex.charAt(2)+hex.charAt(2)+
hex.charAt(3)+hex.charAt(3);}
else if(hex.length===6){format=Format.HEX;}
else{format=Format.HEXA;}
const r=parseInt(hex.substring(0,2),16);const g=parseInt(hex.substring(2,4),16);const b=parseInt(hex.substring(4,6),16);let a=1;if(hex.length===8){a=parseInt(hex.substring(6,8),16)/255;}
return new Color([r/255,g/255,b/255,a],format,text);}
if(match[2]){const nickname=match[2].toLowerCase();if(nickname in Nicknames){const rgba=Nicknames[nickname];const color=Color.fromRGBA(rgba);color._format=Format.Nickname;color._originalText=text;return color;}
return null;}
return null;}
match=text.toLowerCase().match(/^\s*(?:(rgba?)|(hsla?))\((.*)\)\s*$/);if(match){const components=match[3].trim();let values=components.split(/\s*,\s*/);if(values.length===1){values=components.split(/\s+/);if(values[3]==='/'){values.splice(3,1);if(values.length!==4){return null;}}
else if((values.length>2&&values[2].indexOf('/')!==-1)||(values.length>3&&values[3].indexOf('/')!==-1)){const alpha=values.slice(2,4).join('');values=values.slice(0,2).concat(alpha.split(/\//)).concat(values.slice(4));}
else if(values.length>=4){return null;}}
if(values.length!==3&&values.length!==4||values.indexOf('')>-1){return null;}
const hasAlpha=(values[3]!==undefined);if(match[1]){const rgba=[Color._parseRgbNumeric(values[0]),Color._parseRgbNumeric(values[1]),Color._parseRgbNumeric(values[2]),hasAlpha?Color._parseAlphaNumeric(values[3]):1];if(rgba.indexOf(null)>-1){return null;}
return new Color((rgba),hasAlpha?Format.RGBA:Format.RGB,text);}
if(match[2]){const hsla=[Color._parseHueNumeric(values[0]),Color._parseSatLightNumeric(values[1]),Color._parseSatLightNumeric(values[2]),hasAlpha?Color._parseAlphaNumeric(values[3]):1];if(hsla.indexOf(null)>-1){return null;}
const rgba=[];Color.hsl2rgb((hsla),rgba);return new Color(rgba,hasAlpha?Format.HSLA:Format.HSL,text);}}
return null;}
static fromRGBA(rgba){return new Color([rgba[0]/255,rgba[1]/255,rgba[2]/255,rgba[3]],Format.RGBA);}
static fromHSVA(hsva){const rgba=[];Color.hsva2rgba(hsva,rgba);return new Color(rgba,Format.HSLA);}
static _parsePercentOrNumber(value){if(isNaN(value.replace('%',''))){return null;}
const parsed=parseFloat(value);if(value.indexOf('%')!==-1){if(value.indexOf('%')!==value.length-1){return null;}
return parsed/100;}
return parsed;}
static _parseRgbNumeric(value){const parsed=Color._parsePercentOrNumber(value);if(parsed===null){return null;}
if(value.indexOf('%')!==-1){return parsed;}
return parsed/255;}
static _parseHueNumeric(value){const angle=value.replace(/(deg|g?rad|turn)$/,'');if(isNaN(angle)||value.match(/\s+(deg|g?rad|turn)/)){return null;}
const number=parseFloat(angle);if(value.indexOf('turn')!==-1){return number%1;}
if(value.indexOf('grad')!==-1){return(number/400)%1;}
if(value.indexOf('rad')!==-1){return(number/(2*Math.PI))%1;}
return(number/360)%1;}
static _parseSatLightNumeric(value){if(value.indexOf('%')!==value.length-1||isNaN(value.replace('%',''))){return null;}
const parsed=parseFloat(value);return Math.min(1,parsed/100);}
static _parseAlphaNumeric(value){return Color._parsePercentOrNumber(value);}
static _hsva2hsla(hsva,out_hsla){const h=hsva[0];let s=hsva[1];const v=hsva[2];const t=(2-s)*v;if(v===0||s===0){s=0;}
else{s*=v/(t<1?t:2-t);}
out_hsla[0]=h;out_hsla[1]=s;out_hsla[2]=t/2;out_hsla[3]=hsva[3];}
static hsl2rgb(hsl,out_rgb){const h=hsl[0];let s=hsl[1];const l=hsl[2];function hue2rgb(p,q,h){if(h<0){h+=1;}
else if(h>1){h-=1;}
if((h*6)<1){return p+(q-p)*h*6;}
if((h*2)<1){return q;}
if((h*3)<2){return p+(q-p)*((2/3)-h)*6;}
return p;}
if(s<0){s=0;}
let q;if(l<=0.5){q=l*(1+s);}
else{q=l+s-(l*s);}
const p=2*l-q;const tr=h+(1/3);const tg=h;const tb=h-(1/3);out_rgb[0]=hue2rgb(p,q,tr);out_rgb[1]=hue2rgb(p,q,tg);out_rgb[2]=hue2rgb(p,q,tb);out_rgb[3]=hsl[3];}
static hsva2rgba(hsva,out_rgba){Color._hsva2hsla(hsva,_tmpHSLA);Color.hsl2rgb(_tmpHSLA,out_rgba);for(let i=0;i<_tmpHSLA.length;i++){_tmpHSLA[i]=0;}}
static desiredLuminance(luminance,contrast,lighter){function computeLuminance(){if(lighter){return(luminance+0.05)*contrast-0.05;}
return(luminance+0.05)/contrast-0.05;}
let desiredLuminance=computeLuminance();if(desiredLuminance<0||desiredLuminance>1){lighter=!lighter;desiredLuminance=computeLuminance();}
return desiredLuminance;}
static approachColorValue(candidateHSVA,bgRGBA,index,desiredLuminance){const candidateLuminance=()=>{return luminance(blendColors(Color.fromHSVA(candidateHSVA).rgba(),bgRGBA));};const epsilon=0.0002;let x=candidateHSVA[index];let multiplier=1;let dLuminance=candidateLuminance()-desiredLuminance;let previousSign=Math.sign(dLuminance);for(let guard=100;guard;guard--){if(Math.abs(dLuminance)<epsilon){candidateHSVA[index]=x;return x;}
const sign=Math.sign(dLuminance);if(sign!==previousSign){multiplier/=2;previousSign=sign;}
else if(x<0||x>1){return null;}
x+=multiplier*(index===2?-dLuminance:dLuminance);candidateHSVA[index]=x;dLuminance=candidateLuminance()-desiredLuminance;}
console.error('Loop exited unexpectedly');return null;}
static findFgColorForContrast(fgColor,bgColor,requiredContrast){const candidateHSVA=fgColor.hsva();const bgRGBA=bgColor.rgba();const candidateLuminance=()=>{return luminance(blendColors(Color.fromHSVA(candidateHSVA).rgba(),bgRGBA));};const bgLuminance=luminance(bgColor.rgba());const fgLuminance=candidateLuminance();const fgIsLighter=fgLuminance>bgLuminance;const desiredLuminance=Color.desiredLuminance(bgLuminance,requiredContrast,fgIsLighter);const saturationComponentIndex=1;const valueComponentIndex=2;if(Color.approachColorValue(candidateHSVA,bgRGBA,valueComponentIndex,desiredLuminance)){return Color.fromHSVA(candidateHSVA);}
candidateHSVA[valueComponentIndex]=1;if(Color.approachColorValue(candidateHSVA,bgRGBA,saturationComponentIndex,desiredLuminance)){return Color.fromHSVA(candidateHSVA);}
return null;}
format(){return this._format;}
hsla(){if(this._hsla){return this._hsla;}
this._hsla=rgbaToHsla(this._rgba);return this._hsla;}
canonicalHSLA(){const hsla=this.hsla();return[Math.round(hsla[0]*360),Math.round(hsla[1]*100),Math.round(hsla[2]*100),hsla[3]];}
hsva(){const hsla=this.hsla();const h=hsla[0];let s=hsla[1];const l=hsla[2];s*=l<0.5?l:1-l;return[h,s!==0?2*s/(l+s):0,(l+s),hsla[3]];}
hasAlpha(){return this._rgba[3]!==1;}
detectHEXFormat(){let canBeShort=true;for(let i=0;i<4;++i){const c=Math.round(this._rgba[i]*255);if(c%17){canBeShort=false;break;}}
const hasAlpha=this.hasAlpha();const cf=Format;if(canBeShort){return hasAlpha?cf.ShortHEXA:cf.ShortHEX;}
return hasAlpha?cf.HEXA:cf.HEX;}
asString(format){if(format===this._format&&this._originalTextIsValid){return this._originalText;}
if(!format){format=this._format;}
function toRgbValue(value){return Math.round(value*255);}
function toHexValue(value){const hex=Math.round(value*255).toString(16);return hex.length===1?'0'+hex:hex;}
function toShortHexValue(value){return(Math.round(value*255)/17).toString(16);}
switch(format){case Format.Original:{return this._originalText;}
case Format.RGB:case Format.RGBA:{const start=c.sprintf('rgb(%d %d %d',toRgbValue(this._rgba[0]),toRgbValue(this._rgba[1]),toRgbValue(this._rgba[2]));if(this.hasAlpha()){return start+c.sprintf(' / %d%)',Math.round(this._rgba[3]*100));}
return start+')';}
case Format.HSL:case Format.HSLA:{const hsla=this.hsla();const start=c.sprintf('hsl(%ddeg %d% %d%',Math.round(hsla[0]*360),Math.round(hsla[1]*100),Math.round(hsla[2]*100));if(this.hasAlpha()){return start+c.sprintf(' / %d%)',Math.round(hsla[3]*100));}
return start+')';}
case Format.HEXA:{return c.sprintf('#%s%s%s%s',toHexValue(this._rgba[0]),toHexValue(this._rgba[1]),toHexValue(this._rgba[2]),toHexValue(this._rgba[3])).toLowerCase();}
case Format.HEX:{if(this.hasAlpha()){return null;}
return c.sprintf('#%s%s%s',toHexValue(this._rgba[0]),toHexValue(this._rgba[1]),toHexValue(this._rgba[2])).toLowerCase();}
case Format.ShortHEXA:{const hexFormat=this.detectHEXFormat();if(hexFormat!==Format.ShortHEXA&&hexFormat!==Format.ShortHEX){return null;}
return c.sprintf('#%s%s%s%s',toShortHexValue(this._rgba[0]),toShortHexValue(this._rgba[1]),toShortHexValue(this._rgba[2]),toShortHexValue(this._rgba[3])).toLowerCase();}
case Format.ShortHEX:{if(this.hasAlpha()){return null;}
if(this.detectHEXFormat()!==Format.ShortHEX){return null;}
return c.sprintf('#%s%s%s',toShortHexValue(this._rgba[0]),toShortHexValue(this._rgba[1]),toShortHexValue(this._rgba[2])).toLowerCase();}
case Format.Nickname:{return this.nickname();}}
return this._originalText;}
rgba(){return this._rgba.slice();}
canonicalRGBA(){const rgba=new Array(4);for(let i=0;i<3;++i){rgba[i]=Math.round(this._rgba[i]*255);}
rgba[3]=this._rgba[3];return rgba;}
nickname(){if(!_rgbaToNickname){_rgbaToNickname=new Map();for(const nickname in Nicknames){let rgba=Nicknames[nickname];if(rgba.length!==4){rgba=rgba.concat(1);}
_rgbaToNickname.set(String(rgba),nickname);}}
return _rgbaToNickname.get(String(this.canonicalRGBA()))||null;}
toProtocolRGBA(){const rgba=this.canonicalRGBA();const result={r:rgba[0],g:rgba[1],b:rgba[2],a:undefined};if(rgba[3]!==1){result.a=rgba[3];}
return result;}
invert(){const rgba=[];rgba[0]=1-this._rgba[0];rgba[1]=1-this._rgba[1];rgba[2]=1-this._rgba[2];rgba[3]=this._rgba[3];return new Color(rgba,Format.RGBA);}
setAlpha(alpha){const rgba=this._rgba.slice();rgba[3]=alpha;return new Color(rgba,Format.RGBA);}
blendWith(fgColor){const rgba=blendColors(fgColor._rgba,this._rgba);return new Color(rgba,Format.RGBA);}
setFormat(format){this._format=format;}}
const Format={Original:'original',Nickname:'nickname',HEX:'hex',ShortHEX:'shorthex',HEXA:'hexa',ShortHEXA:'shorthexa',RGB:'rgb',RGBA:'rgba',HSL:'hsl',HSLA:'hsla'};const Nicknames={'aliceblue':[240,248,255],'antiquewhite':[250,235,215],'aqua':[0,255,255],'aquamarine':[127,255,212],'azure':[240,255,255],'beige':[245,245,220],'bisque':[255,228,196],'black':[0,0,0],'blanchedalmond':[255,235,205],'blue':[0,0,255],'blueviolet':[138,43,226],'brown':[165,42,42],'burlywood':[222,184,135],'cadetblue':[95,158,160],'chartreuse':[127,255,0],'chocolate':[210,105,30],'coral':[255,127,80],'cornflowerblue':[100,149,237],'cornsilk':[255,248,220],'crimson':[237,20,61],'cyan':[0,255,255],'darkblue':[0,0,139],'darkcyan':[0,139,139],'darkgoldenrod':[184,134,11],'darkgray':[169,169,169],'darkgrey':[169,169,169],'darkgreen':[0,100,0],'darkkhaki':[189,183,107],'darkmagenta':[139,0,139],'darkolivegreen':[85,107,47],'darkorange':[255,140,0],'darkorchid':[153,50,204],'darkred':[139,0,0],'darksalmon':[233,150,122],'darkseagreen':[143,188,143],'darkslateblue':[72,61,139],'darkslategray':[47,79,79],'darkslategrey':[47,79,79],'darkturquoise':[0,206,209],'darkviolet':[148,0,211],'deeppink':[255,20,147],'deepskyblue':[0,191,255],'dimgray':[105,105,105],'dimgrey':[105,105,105],'dodgerblue':[30,144,255],'firebrick':[178,34,34],'floralwhite':[255,250,240],'forestgreen':[34,139,34],'fuchsia':[255,0,255],'gainsboro':[220,220,220],'ghostwhite':[248,248,255],'gold':[255,215,0],'goldenrod':[218,165,32],'gray':[128,128,128],'grey':[128,128,128],'green':[0,128,0],'greenyellow':[173,255,47],'honeydew':[240,255,240],'hotpink':[255,105,180],'indianred':[205,92,92],'indigo':[75,0,130],'ivory':[255,255,240],'khaki':[240,230,140],'lavender':[230,230,250],'lavenderblush':[255,240,245],'lawngreen':[124,252,0],'lemonchiffon':[255,250,205],'lightblue':[173,216,230],'lightcoral':[240,128,128],'lightcyan':[224,255,255],'lightgoldenrodyellow':[250,250,210],'lightgreen':[144,238,144],'lightgray':[211,211,211],'lightgrey':[211,211,211],'lightpink':[255,182,193],'lightsalmon':[255,160,122],'lightseagreen':[32,178,170],'lightskyblue':[135,206,250],'lightslategray':[119,136,153],'lightslategrey':[119,136,153],'lightsteelblue':[176,196,222],'lightyellow':[255,255,224],'lime':[0,255,0],'limegreen':[50,205,50],'linen':[250,240,230],'magenta':[255,0,255],'maroon':[128,0,0],'mediumaquamarine':[102,205,170],'mediumblue':[0,0,205],'mediumorchid':[186,85,211],'mediumpurple':[147,112,219],'mediumseagreen':[60,179,113],'mediumslateblue':[123,104,238],'mediumspringgreen':[0,250,154],'mediumturquoise':[72,209,204],'mediumvioletred':[199,21,133],'midnightblue':[25,25,112],'mintcream':[245,255,250],'mistyrose':[255,228,225],'moccasin':[255,228,181],'navajowhite':[255,222,173],'navy':[0,0,128],'oldlace':[253,245,230],'olive':[128,128,0],'olivedrab':[107,142,35],'orange':[255,165,0],'orangered':[255,69,0],'orchid':[218,112,214],'palegoldenrod':[238,232,170],'palegreen':[152,251,152],'paleturquoise':[175,238,238],'palevioletred':[219,112,147],'papayawhip':[255,239,213],'peachpuff':[255,218,185],'peru':[205,133,63],'pink':[255,192,203],'plum':[221,160,221],'powderblue':[176,224,230],'purple':[128,0,128],'rebeccapurple':[102,51,153],'red':[255,0,0],'rosybrown':[188,143,143],'royalblue':[65,105,225],'saddlebrown':[139,69,19],'salmon':[250,128,114],'sandybrown':[244,164,96],'seagreen':[46,139,87],'seashell':[255,245,238],'sienna':[160,82,45],'silver':[192,192,192],'skyblue':[135,206,235],'slateblue':[106,90,205],'slategray':[112,128,144],'slategrey':[112,128,144],'snow':[255,250,250],'springgreen':[0,255,127],'steelblue':[70,130,180],'tan':[210,180,140],'teal':[0,128,128],'thistle':[216,191,216],'tomato':[255,99,71],'turquoise':[64,224,208],'violet':[238,130,238],'wheat':[245,222,179],'white':[255,255,255],'whitesmoke':[245,245,245],'yellow':[255,255,0],'yellowgreen':[154,205,50],'transparent':[0,0,0,0],};const PageHighlight={Content:Color.fromRGBA([111,168,220,.66]),ContentLight:Color.fromRGBA([111,168,220,.5]),ContentOutline:Color.fromRGBA([9,83,148]),Padding:Color.fromRGBA([147,196,125,.55]),PaddingLight:Color.fromRGBA([147,196,125,.4]),Border:Color.fromRGBA([255,229,153,.66]),BorderLight:Color.fromRGBA([255,229,153,.5]),Margin:Color.fromRGBA([246,178,107,.66]),MarginLight:Color.fromRGBA([246,178,107,.5]),EventTarget:Color.fromRGBA([255,196,196,.66]),Shape:Color.fromRGBA([96,82,177,0.8]),ShapeMargin:Color.fromRGBA([96,82,127,.6]),CssGrid:Color.fromRGBA([0x4b,0,0x82,1]),GridRowLine:Color.fromRGBA([127,32,210,1]),GridColumnLine:Color.fromRGBA([127,32,210,1]),GridBorder:Color.fromRGBA([127,32,210,1]),GridRowGapBackground:Color.fromRGBA([127,32,210,.3]),GridColumnGapBackground:Color.fromRGBA([127,32,210,.3]),GridRowGapHatch:Color.fromRGBA([127,32,210,.8]),GridColumnGapHatch:Color.fromRGBA([127,32,210,.8]),GridAreaBorder:Color.fromRGBA([26,115,232,1]),};const SourceOrderHighlight={ParentOutline:Color.fromRGBA([224,90,183,1]),ChildOutline:Color.fromRGBA([0,120,212,1]),};const _tmpHSLA=[0,0,0,0];function buildPath(commands,bounds){let commandsIndex=0;function extractPoints(count){const points=[];for(let i=0;i<count;++i){const x=Math.round(commands[commandsIndex++]*emulationScaleFactor);bounds.maxX=Math.max(bounds.maxX,x);bounds.minX=Math.min(bounds.minX,x);const y=Math.round(commands[commandsIndex++]*emulationScaleFactor);bounds.maxY=Math.max(bounds.maxY,y);bounds.minY=Math.min(bounds.minY,y);bounds.leftmostXForY[y]=Math.min(bounds.leftmostXForY[y]||Number.MAX_VALUE,x);bounds.rightmostXForY[y]=Math.max(bounds.rightmostXForY[y]||Number.MIN_VALUE,x);bounds.topmostYForX[x]=Math.min(bounds.topmostYForX[x]||Number.MAX_VALUE,y);bounds.bottommostYForX[x]=Math.max(bounds.bottommostYForX[x]||Number.MIN_VALUE,y);bounds.allPoints.push({x,y});points.push(x,y);}
return points;}
const commandsLength=commands.length;const path=new Path2D();while(commandsIndex<commandsLength){switch(commands[commandsIndex++]){case'M':path.moveTo.apply(path,extractPoints(1));break;case'L':path.lineTo.apply(path,extractPoints(1));break;case'C':path.bezierCurveTo.apply(path,extractPoints(3));break;case'Q':path.quadraticCurveTo.apply(path,extractPoints(2));break;case'Z':path.closePath();break;}}
return path;}
function emptyBounds(){const bounds={minX:Number.MAX_VALUE,minY:Number.MAX_VALUE,maxX:Number.MIN_VALUE,maxY:Number.MIN_VALUE,leftmostXForY:{},rightmostXForY:{},topmostYForX:{},bottommostYForX:{},allPoints:[]};return bounds;}
function applyMatrixToPoint(point,matrix){point=new DOMPoint(point.x,point.y);point=point.matrixTransform(matrix);return{x:point.x,y:point.y};}
const GridArrowTypes={leftTop:'left-top',leftMid:'left-mid',leftBottom:'left-bottom',topLeft:'top-left',topMid:'top-mid',topRight:'top-right',rightTop:'right-top',rightMid:'right-mid',rightBottom:'right-bottom',bottomLeft:'bottom-left',bottomMid:'bottom-mid',bottomRight:'bottom-right',};const gridArrowWidth=3;const gridPageMargin=20;const gridLabelDistance=20;const maxLineNamesCount=3;const defaultLabelColor='#1A73E8';function drawGridLabels(config,gridBounds,areaBounds,writingModeMatrix=new DOMMatrix()){const labelContainerId=window._gridLayerCounter?`grid-${window._gridLayerCounter++}-labels`:'grid-labels';let labelContainerForNode=document.getElementById(labelContainerId);if(!labelContainerForNode){const mainLabelLayerContainer=document.getElementById('grid-label-container');labelContainerForNode=mainLabelLayerContainer.createChild('div');labelContainerForNode.id=labelContainerId;const labelColor=getLabelColors(config);labelContainerForNode.style.setProperty('--row-label-color',labelColor.rowBackground);labelContainerForNode.style.setProperty('--column-label-color',labelColor.columnBackground);labelContainerForNode.style.setProperty('--row-label-text-color',labelColor.rowText);labelContainerForNode.style.setProperty('--column-label-text-color',labelColor.columnText);}
labelContainerForNode.removeChildren();const areaNameContainer=labelContainerForNode.createChild('div','area-names');const lineNameContainer=labelContainerForNode.createChild('div','line-names');const lineNumberContainer=labelContainerForNode.createChild('div','line-numbers');const trackSizesContainer=labelContainerForNode.createChild('div','track-sizes');const normalizedData=_normalizePositionData(config,gridBounds);if(config.gridHighlightConfig.showLineNames){drawGridLineNames(lineNameContainer,normalizedData,writingModeMatrix,config.writingMode);}
else{drawGridLineNumbers(lineNumberContainer,normalizedData,writingModeMatrix,config.writingMode);}
drawGridAreaNames(areaNameContainer,areaBounds,writingModeMatrix,config.writingMode);if(config.columnTrackSizes){drawGridTrackSizes(trackSizesContainer,config.columnTrackSizes,'column',writingModeMatrix,config.writingMode);}
if(config.rowTrackSizes){drawGridTrackSizes(trackSizesContainer,config.rowTrackSizes,'row',writingModeMatrix,config.writingMode);}}
function getLabelColors(config){const white=(new Color([1,1,1],Format.RGB)).setAlpha(.2);const rowBackground=Color.parse(config.gridHighlightConfig.rowLineColor||defaultLabelColor).blendWith(white);const columnBackground=Color.parse(config.gridHighlightConfig.columnLineColor||defaultLabelColor).blendWith(white);const rowL=luminance(rowBackground.rgba());const rowContrastForBlack=(rowL+0.05)/0.05;const rowContrastForWhite=1.05/(rowL+0.05);const columnL=luminance(columnBackground.rgba());const columnContrastForBlack=(columnL+0.05)/0.05;const columnContrastForWhite=1.05/(columnL+0.05);return{rowBackground:rowBackground.asString(),columnBackground:columnBackground.asString(),rowText:rowContrastForBlack>rowContrastForWhite?'#121212':'white',columnText:columnContrastForBlack>columnContrastForWhite?'#121212':'white'};}
function*positionIterator(positions,axis){let lastEmittedPos=null;for(const[i,pos]of positions.entries()){const isFirst=i===0;const isLast=i===positions.length-1;const isFarEnoughFromPrevious=Math.abs(pos[axis]-(lastEmittedPos?lastEmittedPos[axis]:0))>gridLabelDistance;const isFarEnoughFromLast=Math.abs(!isLast&&positions[positions.length-1][axis]-pos[axis])>gridLabelDistance;if(isFirst||isLast||(isFarEnoughFromPrevious&&isFarEnoughFromLast)){yield[i,pos];lastEmittedPos=pos;}}}
const last=array=>array[array.length-1];const first=array=>array[0];function _normalizeNameData(namePositions){const positions=[];const names=[];for(const{name,x,y}of namePositions){const normalizedX=Math.round(x);const normalizedY=Math.round(y);const existingIndex=positions.findIndex(({x,y})=>x===normalizedX&&y===normalizedY);if(existingIndex>-1){names[existingIndex].push(name);}
else{positions.push({x:normalizedX,y:normalizedY});names.push([name]);}}
return{positions,names};}
function _normalizePositionData(config,bounds){const width=Math.round(bounds.maxX-bounds.minX);const height=Math.round(bounds.maxY-bounds.minY);const data={rows:{positive:{positions:[],hasFirst:false,hasLast:false},negative:{positions:[],hasFirst:false,hasLast:false},},columns:{positive:{positions:[],hasFirst:false,hasLast:false},negative:{positions:[],hasFirst:false,hasLast:false},},bounds:{minX:Math.round(bounds.minX),maxX:Math.round(bounds.maxX),minY:Math.round(bounds.minY),maxY:Math.round(bounds.maxY),allPoints:bounds.allPoints,width,height,}};if(config.gridHighlightConfig.showLineNames){const rowData=_normalizeNameData(config.rowLineNameOffsets);data.rows.positive={positions:rowData.positions,names:rowData.names,hasFirst:rowData.positions.length&&first(rowData.positions).y===data.bounds.minY,hasLast:rowData.positions.length&&last(rowData.positions).y===data.bounds.maxY};const columnData=_normalizeNameData(config.columnLineNameOffsets);data.columns.positive={positions:columnData.positions,names:columnData.names,hasFirst:columnData.positions.length&&first(columnData.positions).x===data.bounds.minX,hasLast:columnData.positions.length&&last(columnData.positions).x===data.bounds.maxX};}
else{const normalizeXY=({x,y})=>({x:Math.round(x),y:Math.round(y)});if(config.positiveRowLineNumberPositions){data.rows.positive={positions:config.positiveRowLineNumberPositions.map(normalizeXY),hasFirst:Math.round(first(config.positiveRowLineNumberPositions).y)===data.bounds.minY,hasLast:Math.round(last(config.positiveRowLineNumberPositions).y)===data.bounds.maxY,};}
if(config.negativeRowLineNumberPositions){data.rows.negative={positions:config.negativeRowLineNumberPositions.map(normalizeXY),hasFirst:Math.round(first(config.negativeRowLineNumberPositions).y)===data.bounds.minY,hasLast:Math.round(last(config.negativeRowLineNumberPositions).y)===data.bounds.maxY};}
if(config.positiveColumnLineNumberPositions){data.columns.positive={positions:config.positiveColumnLineNumberPositions.map(normalizeXY),hasFirst:Math.round(first(config.positiveColumnLineNumberPositions).x)===data.bounds.minX,hasLast:Math.round(last(config.positiveColumnLineNumberPositions).x)===data.bounds.maxX};}
if(config.negativeColumnLineNumberPositions){data.columns.negative={positions:config.negativeColumnLineNumberPositions.map(normalizeXY),hasFirst:Math.round(first(config.negativeColumnLineNumberPositions).x)===data.bounds.minX,hasLast:Math.round(last(config.negativeColumnLineNumberPositions).x)===data.bounds.maxX};}}
return data;}
function drawGridLineNumbers(container,data,writingModeMatrix=new DOMMatrix(),writingMode='horizontal-tb'){if(!data.columns.positive.names){for(const[i,pos]of positionIterator(data.columns.positive.positions,'x')){const element=_createLabelElement(container,(i+1).toString(),'column');_placePositiveColumnLabel(element,applyMatrixToPoint(pos,writingModeMatrix),data,writingMode);}}
if(!data.rows.positive.names){for(const[i,pos]of positionIterator(data.rows.positive.positions,'y')){const element=_createLabelElement(container,(i+1).toString(),'row');_placePositiveRowLabel(element,applyMatrixToPoint(pos,writingModeMatrix),data,writingMode);}}
for(const[i,pos]of positionIterator(data.columns.negative.positions,'x')){const element=_createLabelElement(container,(data.columns.negative.positions.length*-1+i).toString(),'column');_placeNegativeColumnLabel(element,applyMatrixToPoint(pos,writingModeMatrix),data,writingMode);}
for(const[i,pos]of positionIterator(data.rows.negative.positions,'y')){const element=_createLabelElement(container,(data.rows.negative.positions.length*-1+i).toString(),'row');_placeNegativeRowLabel(element,applyMatrixToPoint(pos,writingModeMatrix),data,writingMode);}}
function drawGridTrackSizes(container,trackSizes,direction,writingModeMatrix=new DOMMatrix(),writingMode='horizontal-tb'){const{main,cross}=_getAxes(writingMode);const{crossSize}=_getCanvasSizes(writingMode);for(const{x,y,computedSize,authoredSize}of trackSizes){const point=applyMatrixToPoint({x,y},writingModeMatrix);const size=computedSize.toFixed(2);const formattedComputed=`${size.endsWith('.00') ? size.slice(0, -3) : size}px`;const element=_createLabelElement(container,`${authoredSize ? authoredSize + '·' : ''}${formattedComputed}`,direction);const labelSize=_getLabelSize(element,writingMode);let flipIn=point[main]-labelSize.mainSize<gridPageMargin;if(direction==='column'){flipIn=writingMode==='vertical-rl'?crossSize-point[cross]-labelSize.crossSize<gridPageMargin:point[cross]-labelSize.crossSize<gridPageMargin;}
let arrowType=_adaptArrowTypeForWritingMode(direction==='column'?GridArrowTypes.bottomMid:GridArrowTypes.rightMid,writingMode);arrowType=_flipArrowTypeIfNeeded(arrowType,flipIn);_placeLineLabel(element,arrowType,point.x,point.y,labelSize);}}
function drawGridLineNames(container,data,writingModeMatrix=new DOMMatrix(),writingMode='horizontal-tb'){for(const[i,pos]of data.columns.positive.positions.entries()){const names=data.columns.positive.names[i];const element=_createLabelElement(container,_makeLineNameLabelContent(names),'column');_placePositiveColumnLabel(element,applyMatrixToPoint(pos,writingModeMatrix),data,writingMode);}
for(const[i,pos]of data.rows.positive.positions.entries()){const names=data.rows.positive.names[i];const element=_createLabelElement(container,_makeLineNameLabelContent(names),'row');_placePositiveRowLabel(element,applyMatrixToPoint(pos,writingModeMatrix),data,writingMode);}}
function _makeLineNameLabelContent(names){const content=document.createElement('ul');const namesToDisplay=names.slice(0,maxLineNamesCount);for(const name of namesToDisplay){content.createChild('li','line-name').textContent=name;}
return content;}
function drawGridAreaNames(container,areaBounds,writingModeMatrix=new DOMMatrix(),writingMode='horizontal-tb'){for(const{name,bounds}of areaBounds){const element=_createLabelElement(container,name,'row');const{width,height}=_getLabelSize(element,writingMode);const point=writingMode==='vertical-rl'?bounds.allPoints[3]:bounds.allPoints[0];const corner=applyMatrixToPoint(point,writingModeMatrix);const flipX=bounds.allPoints[1].x<bounds.allPoints[0].x;const flipY=bounds.allPoints[3].y<bounds.allPoints[0].y;element.style.left=(corner.x-(flipX?width:0))+'px';element.style.top=(corner.y-(flipY?height:0))+'px';}}
function _createLabelElement(container,textContent,direction){const wrapper=container.createChild('div');const element=wrapper.createChild('div','grid-label-content');element.dataset.direction=direction;if(typeof textContent==='string'){element.textContent=textContent;}
else{element.appendChild(textContent);}
return element;}
function _getLabelSideEdgePoints(gridBounds,direction,side){const[p1,p2,p3,p4]=gridBounds.allPoints;if(direction==='row'){return side==='positive'?{start:p1,end:p4}:{start:p2,end:p3};}
return side==='positive'?{start:p1,end:p2}:{start:p4,end:p3};}
function _getAxes(writingMode){return writingMode.startsWith('vertical')?{main:'y',cross:'x'}:{main:'x',cross:'y'};}
function _getCanvasSizes(writingMode){return writingMode.startsWith('vertical')?{mainSize:canvasHeight,crossSize:canvasWidth}:{mainSize:canvasWidth,crossSize:canvasHeight};}
function _placePositiveRowLabel(element,pos,data,writingMode){const{start,end}=_getLabelSideEdgePoints(data.bounds,'row','positive');const{main,cross}=_getAxes(writingMode);const{crossSize}=_getCanvasSizes(writingMode);const labelSize=_getLabelSize(element,writingMode);const isAtSharedStartCorner=pos[cross]===start[cross]&&data.columns&&data.columns.positive.hasFirst;const isAtSharedEndCorner=pos[cross]===end[cross]&&data.columns&&data.columns.negative.hasFirst;const isTooCloseToViewportStart=pos[cross]<gridPageMargin;const isTooCloseToViewportEnd=crossSize-pos[cross]<gridPageMargin;const flipIn=pos[main]-labelSize.mainSize<gridPageMargin;if(flipIn&&(isAtSharedStartCorner||isAtSharedEndCorner)){element.classList.add('inner-shared-corner');}
let arrowType=_adaptArrowTypeForWritingMode(GridArrowTypes.rightMid,writingMode);if(isTooCloseToViewportStart||isAtSharedStartCorner){arrowType=_adaptArrowTypeForWritingMode(GridArrowTypes.rightTop,writingMode);}
else if(isTooCloseToViewportEnd||isAtSharedEndCorner){arrowType=_adaptArrowTypeForWritingMode(GridArrowTypes.rightBottom,writingMode);}
arrowType=_flipArrowTypeIfNeeded(arrowType,flipIn);_placeLineLabel(element,arrowType,pos.x,pos.y,labelSize);}
function _placeNegativeRowLabel(element,pos,data,writingMode){const{start,end}=_getLabelSideEdgePoints(data.bounds,'row','negative');const{main,cross}=_getAxes(writingMode);const{mainSize,crossSize}=_getCanvasSizes(writingMode);const labelSize=_getLabelSize(element,writingMode);const isAtSharedStartCorner=pos[cross]===start[cross]&&data.columns&&data.columns.positive.hasLast;const isAtSharedEndCorner=pos[cross]===end[cross]&&data.columns&&data.columns.negative.hasLast;const isTooCloseToViewportStart=pos[cross]<gridPageMargin;const isTooCloseToViewportEnd=crossSize-pos[cross]<gridPageMargin;const flipIn=mainSize-pos[main]-labelSize.mainSize<gridPageMargin;if(flipIn&&(isAtSharedStartCorner||isAtSharedEndCorner)){element.classList.add('inner-shared-corner');}
let arrowType=_adaptArrowTypeForWritingMode(GridArrowTypes.leftMid,writingMode);if(isTooCloseToViewportStart||isAtSharedStartCorner){arrowType=_adaptArrowTypeForWritingMode(GridArrowTypes.leftTop,writingMode);}
else if(isTooCloseToViewportEnd||isAtSharedEndCorner){arrowType=_adaptArrowTypeForWritingMode(GridArrowTypes.leftBottom,writingMode);}
arrowType=_flipArrowTypeIfNeeded(arrowType,flipIn);_placeLineLabel(element,arrowType,pos.x,pos.y,labelSize);}
function _placePositiveColumnLabel(element,pos,data,writingMode){const{start,end}=_getLabelSideEdgePoints(data.bounds,'column','positive');const{main,cross}=_getAxes(writingMode);const{mainSize,crossSize}=_getCanvasSizes(writingMode);const labelSize=_getLabelSize(element,writingMode);const isAtSharedStartCorner=pos[main]===start[main]&&data.rows&&data.rows.positive.hasFirst;const isAtSharedEndCorner=pos[main]===end[main]&&data.rows&&data.rows.negative.hasFirst;const isTooCloseToViewportStart=pos[main]<gridPageMargin;const isTooCloseToViewportEnd=mainSize-pos[main]<gridPageMargin;const flipIn=writingMode==='vertical-rl'?crossSize-pos[cross]-labelSize.crossSize<gridPageMargin:pos[cross]-labelSize.crossSize<gridPageMargin;if(flipIn&&(isAtSharedStartCorner||isAtSharedEndCorner)){element.classList.add('inner-shared-corner');}
let arrowType=_adaptArrowTypeForWritingMode(GridArrowTypes.bottomMid,writingMode);if(isTooCloseToViewportStart){arrowType=_adaptArrowTypeForWritingMode(GridArrowTypes.bottomLeft,writingMode);}
else if(isTooCloseToViewportEnd){arrowType=_adaptArrowTypeForWritingMode(GridArrowTypes.bottomRight,writingMode);}
arrowType=_flipArrowTypeIfNeeded(arrowType,flipIn);_placeLineLabel(element,arrowType,pos.x,pos.y,labelSize);}
function _placeNegativeColumnLabel(element,pos,data,writingMode){const{start,end}=_getLabelSideEdgePoints(data.bounds,'column','negative');const{main,cross}=_getAxes(writingMode);const{mainSize,crossSize}=_getCanvasSizes(writingMode);const labelSize=_getLabelSize(element,writingMode);const isAtSharedStartCorner=pos[main]===start[main]&&data.rows&&data.rows.positive.hasLast;const isAtSharedEndCorner=pos[main]===end[main]&&data.rows&&data.rows.negative.hasLast;const isTooCloseToViewportStart=pos[main]<gridPageMargin;const isTooCloseToViewportEnd=mainSize-pos[main]<gridPageMargin;const flipIn=writingMode==='vertical-rl'?pos[cross]-labelSize.crossSize<gridPageMargin:crossSize-pos[cross]-labelSize.crossSize<gridPageMargin;if(flipIn&&(isAtSharedStartCorner||isAtSharedEndCorner)){element.classList.add('inner-shared-corner');}
let arrowType=_adaptArrowTypeForWritingMode(GridArrowTypes.topMid,writingMode);if(isTooCloseToViewportStart){arrowType=_adaptArrowTypeForWritingMode(GridArrowTypes.topLeft,writingMode);}
else if(isTooCloseToViewportEnd){arrowType=_adaptArrowTypeForWritingMode(GridArrowTypes.topRight,writingMode);}
arrowType=_flipArrowTypeIfNeeded(arrowType,flipIn);_placeLineLabel(element,arrowType,pos.x,pos.y,labelSize);}
function _placeLineLabel(element,arrowType,x,y,labelSize){const{contentLeft,contentTop}=_getLabelPositionByArrowType(arrowType,x,y,labelSize.width,labelSize.height);element.classList.add(arrowType);element.style.left=contentLeft+'px';element.style.top=contentTop+'px';}
function _getLabelSize(element,writingMode){const width=_getAdjustedLabelWidth(element);const height=element.getBoundingClientRect().height;const mainSize=writingMode.startsWith('vertical')?height:width;const crossSize=writingMode.startsWith('vertical')?width:height;return{width,height,mainSize,crossSize};}
function _getAdjustedLabelWidth(element){let labelWidth=element.getBoundingClientRect().width;if(labelWidth%2===1){labelWidth+=1;element.style.width=labelWidth+'px';}
return labelWidth;}
function _flipArrowTypeIfNeeded(arrowType,flipIn){if(!flipIn){return arrowType;}
switch(arrowType){case GridArrowTypes.leftTop:return GridArrowTypes.rightTop;case GridArrowTypes.leftMid:return GridArrowTypes.rightMid;case GridArrowTypes.leftBottom:return GridArrowTypes.rightBottom;case GridArrowTypes.rightTop:return GridArrowTypes.leftTop;case GridArrowTypes.rightMid:return GridArrowTypes.leftMid;case GridArrowTypes.rightBottom:return GridArrowTypes.leftBottom;case GridArrowTypes.topLeft:return GridArrowTypes.bottomLeft;case GridArrowTypes.topMid:return GridArrowTypes.bottomMid;case GridArrowTypes.topRight:return GridArrowTypes.bottomRight;case GridArrowTypes.bottomLeft:return GridArrowTypes.topLeft;case GridArrowTypes.bottomMid:return GridArrowTypes.topMid;case GridArrowTypes.bottomRight:return GridArrowTypes.topRight;}}
function _adaptArrowTypeForWritingMode(arrowType,writingMode){if(writingMode!=='vertical-rl'&&writingMode!=='vertical-lr'){return arrowType;}
if(writingMode==='vertical-lr'){switch(arrowType){case GridArrowTypes.leftTop:return GridArrowTypes.topLeft;case GridArrowTypes.leftMid:return GridArrowTypes.topMid;case GridArrowTypes.leftBottom:return GridArrowTypes.topRight;case GridArrowTypes.topLeft:return GridArrowTypes.leftTop;case GridArrowTypes.topMid:return GridArrowTypes.leftMid;case GridArrowTypes.topRight:return GridArrowTypes.leftBottom;case GridArrowTypes.rightTop:return GridArrowTypes.bottomRight;case GridArrowTypes.rightMid:return GridArrowTypes.bottomMid;case GridArrowTypes.rightBottom:return GridArrowTypes.bottomLeft;case GridArrowTypes.bottomLeft:return GridArrowTypes.rightTop;case GridArrowTypes.bottomMid:return GridArrowTypes.rightMid;case GridArrowTypes.bottomRight:return GridArrowTypes.rightBottom;}}
if(writingMode==='vertical-rl'){switch(arrowType){case GridArrowTypes.leftTop:return GridArrowTypes.topRight;case GridArrowTypes.leftMid:return GridArrowTypes.topMid;case GridArrowTypes.leftBottom:return GridArrowTypes.topLeft;case GridArrowTypes.topLeft:return GridArrowTypes.rightTop;case GridArrowTypes.topMid:return GridArrowTypes.rightMid;case GridArrowTypes.topRight:return GridArrowTypes.rightBottom;case GridArrowTypes.rightTop:return GridArrowTypes.bottomRight;case GridArrowTypes.rightMid:return GridArrowTypes.bottomMid;case GridArrowTypes.rightBottom:return GridArrowTypes.bottomLeft;case GridArrowTypes.bottomLeft:return GridArrowTypes.leftTop;case GridArrowTypes.bottomMid:return GridArrowTypes.leftMid;case GridArrowTypes.bottomRight:return GridArrowTypes.leftBottom;}}}
function _getLabelPositionByArrowType(arrowType,x,y,labelWidth,labelHeight){let contentTop;let contentLeft;switch(arrowType){case GridArrowTypes.leftTop:contentTop=y;contentLeft=x+gridArrowWidth;break;case GridArrowTypes.leftMid:contentTop=y-(labelHeight/2);contentLeft=x+gridArrowWidth;break;case GridArrowTypes.leftBottom:contentTop=y-labelHeight;contentLeft=x+gridArrowWidth;break;case GridArrowTypes.rightTop:contentTop=y;contentLeft=x-gridArrowWidth-labelWidth;break;case GridArrowTypes.rightMid:contentTop=y-(labelHeight/2);contentLeft=x-gridArrowWidth-labelWidth;break;case GridArrowTypes.rightBottom:contentTop=y-labelHeight;contentLeft=x-labelWidth-gridArrowWidth;break;case GridArrowTypes.topLeft:contentTop=y+gridArrowWidth;contentLeft=x;break;case GridArrowTypes.topMid:contentTop=y+gridArrowWidth;contentLeft=x-(labelWidth/2);break;case GridArrowTypes.topRight:contentTop=y+gridArrowWidth;contentLeft=x-labelWidth;break;case GridArrowTypes.bottomLeft:contentTop=y-gridArrowWidth-labelHeight;contentLeft=x;break;case GridArrowTypes.bottomMid:contentTop=y-gridArrowWidth-labelHeight;contentLeft=x-(labelWidth/2);break;case GridArrowTypes.bottomRight:contentTop=y-gridArrowWidth-labelHeight;contentLeft=x-labelWidth;break;}
return{contentTop,contentLeft,};}
const DEFAULT_EXTENDED_LINE_COLOR='rgba(128, 128, 128, 0.3)';const gridStyle=`
/* Grid row and column labels */
.grid-label-content {
  position: absolute;
  -webkit-user-select: none;
  padding: 2px;
  font-family: Menlo, monospace;
  font-size: 10px;
  min-width: 17px;
  min-height: 15px;
  border-radius: 2px;
  box-sizing: border-box;
  z-index: 1;
  background-clip: padding-box;
  pointer-events: none;
  text-align: center;
  display: flex;
  justify-content: center;
  align-items: center;
}

.grid-label-content[data-direction=row] {
  background-color: var(--row-label-color, #1A73E8);
  color: var(--row-label-text-color, #FFFFFF);
}

.grid-label-content[data-direction=column] {
  background-color: var(--column-label-color, #1A73E8);
  color: var(--column-label-text-color, #FFFFFF);
}

.line-names ul,
.line-names .line-name {
  margin: 0;
  padding: 0;
  list-style: none;
}

.line-names .line-name {
  max-width: 100px;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

.line-names .grid-label-content,
.line-numbers .grid-label-content,
.track-sizes .grid-label-content {
  border: 1px solid white;
  --inner-corner-avoid-distance: 15px;
}

.grid-label-content.top-left.inner-shared-corner,
.grid-label-content.top-right.inner-shared-corner {
  transform: translateY(var(--inner-corner-avoid-distance));
}

.grid-label-content.bottom-left.inner-shared-corner,
.grid-label-content.bottom-right.inner-shared-corner {
  transform: translateY(calc(var(--inner-corner-avoid-distance) * -1));
}

.grid-label-content.left-top.inner-shared-corner,
.grid-label-content.left-bottom.inner-shared-corner {
  transform: translateX(var(--inner-corner-avoid-distance));
}

.grid-label-content.right-top.inner-shared-corner,
.grid-label-content.right-bottom.inner-shared-corner {
  transform: translateX(calc(var(--inner-corner-avoid-distance) * -1));
}

.line-names .grid-label-content::before,
.line-numbers .grid-label-content::before,
.track-sizes .grid-label-content::before {
  position: absolute;
  z-index: 1;
  pointer-events: none;
  content: "";
  width: 3px;
  height: 3px;
  border: 1px solid white;
  border-width: 0 1px 1px 0;
}

.line-names .grid-label-content[data-direction=row]::before,
.line-numbers .grid-label-content[data-direction=row]::before,
.track-sizes .grid-label-content[data-direction=row]::before {
  background: var(--row-label-color, #1A73E8);
}

.line-names .grid-label-content[data-direction=column]::before,
.line-numbers .grid-label-content[data-direction=column]::before,
.track-sizes .grid-label-content[data-direction=column]::before {
  background: var(--column-label-color, #1A73E8);
}

.grid-label-content.bottom-mid::before {
  transform: translateY(-1px) rotate(45deg);
  top: 100%;
}

.grid-label-content.top-mid::before {
  transform: translateY(-3px) rotate(-135deg);
  top: 0%;
}

.grid-label-content.left-mid::before {
  transform: translateX(-3px) rotate(135deg);
  left: 0%
}

.grid-label-content.right-mid::before {
  transform: translateX(3px) rotate(-45deg);
  right: 0%;
}

.grid-label-content.right-top::before {
  transform: translateX(3px) translateY(-1px) rotate(-90deg) skewY(30deg);
  right: 0%;
  top: 0%;
}

.grid-label-content.right-bottom::before {
  transform: translateX(3px) translateY(-3px) skewX(30deg);
  right: 0%;
  top: 100%;
}

.grid-label-content.bottom-right::before {
  transform:  translateX(1px) translateY(-1px) skewY(30deg);
  right: 0%;
  top: 100%;
}

.grid-label-content.bottom-left::before {
  transform:  translateX(-1px) translateY(-1px) rotate(90deg) skewX(30deg);
  left: 0%;
  top: 100%;
}

.grid-label-content.left-top::before {
  transform: translateX(-3px) translateY(-1px) rotate(180deg) skewX(30deg);
  left: 0%;
  top: 0%;
}

.grid-label-content.left-bottom::before {
  transform: translateX(-3px) translateY(-3px) rotate(90deg) skewY(30deg);
  left: 0%;
  top: 100%;
}

.grid-label-content.top-right::before {
  transform:  translateX(1px) translateY(-3px) rotate(-90deg) skewX(30deg);
  right: 0%;
  top: 0%;
}

.grid-label-content.top-left::before {
  transform:  translateX(-1px) translateY(-3px) rotate(180deg) skewY(30deg);
  left: 0%;
  top: 0%;
}

@media (forced-colors: active) {
  .grid-label-content {
      border-color: Highlight;
      background-color: Canvas;
      color: Text;
      forced-color-adjust: none;
  }
  .grid-label-content::before {
    background-color: Canvas;
    border-color: Highlight;
  }
}`;function drawLayoutGridHighlight(highlight,context){const gridBounds=emptyBounds();const gridPath=buildPath(highlight.gridBorder,gridBounds);context.save();_applyWritingModeTransformation(highlight.writingMode,gridBounds,context);if(highlight.gridHighlightConfig.gridBackgroundColor){context.fillStyle=highlight.gridHighlightConfig.gridBackgroundColor;context.fill(gridPath);}
if(highlight.gridHighlightConfig.gridBorderColor){context.save();context.translate(0.5,0.5);context.lineWidth=0;if(highlight.gridHighlightConfig.gridBorderDash){context.setLineDash([3,3]);}
context.strokeStyle=highlight.gridHighlightConfig.gridBorderColor;context.stroke(gridPath);context.restore();}
const rowBounds=_drawGridLines(context,highlight,'row');const columnBounds=_drawGridLines(context,highlight,'column');_drawGridGap(context,highlight.rowGaps,highlight.gridHighlightConfig.rowGapColor,highlight.gridHighlightConfig.rowHatchColor,highlight.rotationAngle,true);_drawGridGap(context,highlight.columnGaps,highlight.gridHighlightConfig.columnGapColor,highlight.gridHighlightConfig.columnHatchColor,highlight.rotationAngle);const areaBounds=_drawGridAreas(context,highlight.areaNames,highlight.gridHighlightConfig.areaBorderColor);const writingModeMatrix=context.getTransform();writingModeMatrix.scaleSelf(1/window.deviceScaleFactor);context.restore();if(highlight.gridHighlightConfig.showGridExtensionLines){if(rowBounds){_drawExtendedGridLines(context,rowBounds,highlight.gridHighlightConfig.rowLineDash,writingModeMatrix);}
if(columnBounds){_drawExtendedGridLines(context,columnBounds,highlight.gridHighlightConfig.columnLineDash,writingModeMatrix);}}
drawGridLabels(highlight,gridBounds,areaBounds,writingModeMatrix);}
function _applyWritingModeTransformation(writingMode,gridBounds,context){if(writingMode!=='vertical-rl'&&writingMode!=='vertical-lr'){return;}
const topLeft=gridBounds.allPoints[0];const bottomLeft=gridBounds.allPoints[3];context.translate(topLeft.x,topLeft.y);if(writingMode==='vertical-rl'){context.rotate(90*Math.PI/180);context.translate(0,-1*(bottomLeft.y-topLeft.y));}
if(writingMode==='vertical-lr'){context.rotate(90*Math.PI/180);context.scale(1,-1);}
context.translate(topLeft.x*-1,topLeft.y*-1);}
function _drawGridLines(context,highlight,direction){const tracks=highlight[`${direction}s`];const color=highlight.gridHighlightConfig[`${direction}LineColor`];const dash=highlight.gridHighlightConfig[`${direction}LineDash`];if(!color){return null;}
const bounds=emptyBounds();const path=buildPath(tracks,bounds);context.save();context.translate(0.5,0.5);if(dash){context.setLineDash([3,3]);}
context.lineWidth=0;context.strokeStyle=color;context.save();context.stroke(path);context.restore();context.restore();return bounds;}
function _drawExtendedGridLines(context,bounds,dash,writingModeMatrix){context.save();context.strokeStyle=DEFAULT_EXTENDED_LINE_COLOR;context.lineWidth=1;context.translate(0.5,0.5);if(dash){context.setLineDash([3,3]);}
for(let i=0;i<bounds.allPoints.length;i+=2){let point1=applyMatrixToPoint(bounds.allPoints[i],writingModeMatrix);let point2=applyMatrixToPoint(bounds.allPoints[i+1],writingModeMatrix);let edgePoint1;let edgePoint2;if(point1.x===point2.x){edgePoint1={x:point1.x,y:0};edgePoint2={x:point1.x,y:canvasHeight};if(point2.y<point1.y){[point1,point2]=[point2,point1];}}
else if(point1.y===point2.y){edgePoint1={x:0,y:point1.y};edgePoint2={x:canvasWidth,y:point1.y};if(point2.x<point1.x){[point1,point2]=[point2,point1];}}
else{const a=(point2.y-point1.y)/(point2.x-point1.x);const b=(point1.y*point2.x-point2.y*point1.x)/(point2.x-point1.x);edgePoint1={x:0,y:b};edgePoint2={x:canvasWidth,y:(canvasWidth*a)+b};if(point2.x<point1.x){[point1,point2]=[point2,point1];}}
context.beginPath();context.moveTo(edgePoint1.x,edgePoint1.y);context.lineTo(point1.x,point1.y);context.moveTo(point2.x,point2.y);context.lineTo(edgePoint2.x,edgePoint2.y);context.stroke();}
context.restore();}
function _drawGridAreas(context,areas,borderColor){if(!areas||!Object.keys(areas).length){return[];}
context.save();if(borderColor){context.strokeStyle=borderColor;}
context.lineWidth=2;const areaBounds=[];for(const name in areas){const areaCommands=areas[name];const bounds=emptyBounds();const path=buildPath(areaCommands,bounds);context.stroke(path);areaBounds.push({name,bounds});}
context.restore();return areaBounds;}
function _drawGridGap(context,gapCommands,gapColor,hatchColor,rotationAngle,flipDirection){if(!gapColor&&!hatchColor){return;}
context.save();context.translate(0.5,0.5);context.lineWidth=0;const bounds=emptyBounds();const path=buildPath(gapCommands,bounds);if(gapColor){context.fillStyle=gapColor;context.fill(path);}
if(hatchColor){_hatchFillPath(context,path,bounds,10,hatchColor,rotationAngle,flipDirection);}
context.restore();}
function _hatchFillPath(context,path,bounds,delta,color,rotationAngle,flipDirection){const dx=bounds.maxX-bounds.minX;const dy=bounds.maxY-bounds.minY;context.rect(bounds.minX,bounds.minY,dx,dy);context.save();context.clip(path);context.setLineDash([5,3]);const majorAxis=Math.max(dx,dy);context.strokeStyle=color;const centerX=bounds.minX+dx/2;const centerY=bounds.minY+dy/2;context.translate(centerX,centerY);context.rotate(rotationAngle*Math.PI/180);context.translate(-centerX,-centerY);if(flipDirection){for(let i=-majorAxis;i<majorAxis;i+=delta){context.beginPath();context.moveTo(bounds.maxX-i,bounds.minY);context.lineTo(bounds.maxX-dy-i,bounds.maxY);context.stroke();}}
else{for(let i=-majorAxis;i<majorAxis;i+=delta){context.beginPath();context.moveTo(i+bounds.minX,bounds.minY);context.lineTo(dy+i+bounds.minX,bounds.maxY);context.stroke();}}
context.restore();}
const style=new CSSStyleSheet();style.replaceSync("@media (forced-colors: active) {\n  :root,\n  body {\n    background-color: transparent;\n    forced-color-adjust: none;\n  }\n}\n");function doReset(){document.getElementById('grid-label-container').removeChildren();window._gridLayerCounter=1;window._gridPainted=false;}
function drawGridHighlight(highlight,context){context=context||window.context;context.save();drawLayoutGridHighlight(highlight,context);context.restore();return;}
window.setPlatform=function(platform){adoptStyleSheet(style);const gridStyleSheet=new CSSStyleSheet();gridStyleSheet.replaceSync(gridStyle);adoptStyleSheet(gridStyleSheet);document.body.classList.add('fill');const canvas=document.createElement('canvas');canvas.id='canvas';canvas.classList.add('fill');document.body.append(canvas);const gridLabels=document.createElement('div');gridLabels.id='grid-label-container';document.body.append(gridLabels);setPlatform(platform);};window.reset=function(data){reset(data);doReset();};window.drawGridHighlight=drawGridHighlight;window.dispatch=dispatch;}());